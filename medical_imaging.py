# -*- coding: utf-8 -*-
"""Medical_Imaging.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W8qzo0rF87eXfxqAjCbE8ksKcSuwi-bn
"""

import os
import sys
import random
import warnings
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
import pandas as pd
from tqdm import tqdm
from itertools import chain
from skimage.io import imread, imshow, imread_collection, concatenate_images
from skimage.transform import resize
from skimage.morphology import label
from tensorflow.keras.models import Model, load_model
from tensorflow.keras.layers import Input, Dropout, Lambda, Conv2D, Conv2DTranspose, MaxPooling2D, Concatenate
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint

IMG_WIDTH = 128
IMG_HEIGHT = 128
IMG_CHANNELS = 3
TRAIN_PATH = "/content/drive/My Drive/Colab Notebooks/U_NET/Train/"
TEST_PATH = "/content/drive/My Drive/Colab Notebooks/U_NET/Validation_1/"

seed = 42
random.seed = seed
np.random.seed = seed

train_ids = next(os.walk(TRAIN_PATH))[1]
test_ids = next(os.walk(TEST_PATH))[1]

test_ids

print("Getting and resizing Train images....")
X_train = np.zeros((len(train_ids), IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype=np.uint8)
Y_train = np.zeros((len(train_ids), IMG_HEIGHT, IMG_WIDTH, 1), dtype=np.bool)
sys.stdout.flush()
for n, id_, in tqdm(enumerate(train_ids), total=len(train_ids)):
    path = TRAIN_PATH + id_
    img = imread(path + '/images/' + id_ + '.png')[:,:,:IMG_CHANNELS]
    img = resize(img, (IMG_HEIGHT, IMG_WIDTH), mode='constant', preserve_range=True)
    X_train[n] = img
    mask = np.zeros((IMG_HEIGHT,IMG_WIDTH, 1), dtype=np.bool)

    for mask_file in next(os.walk(path + '/masks/'))[2]:
        mask_ = imread(path + '/masks/'+ mask_file)
        mask_ = np.expand_dims(resize(mask_, (IMG_HEIGHT,IMG_WIDTH), mode="constant", preserve_range=True), axis=-1)
        mask = np.maximum(mask, mask_)
    Y_train[n] = mask


X_test = np.zeros((len(test_ids), IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype=np.uint8)
sizes_test = []
print("Getting and resizing Test images....")
sys.stdout.flush()
for n, id_, in tqdm(enumerate(test_ids), total=len(test_ids)):
    path = TEST_PATH + id_
    img = imread(path + '/images/' + id_ + '.png')[:,:,:IMG_CHANNELS]
    img = resize(img, (IMG_HEIGHT, IMG_WIDTH), mode='constant', preserve_range=True)
    X_test[n] = img

print("Done")

plt.figure(figsize=(20,16))
x, y = 12,4
for i in range(y):
  for j in range(x):
    plt.subplot(y*2, x , i*2*x+j+1)
    pos = i*120 + j*10
    plt.imshow(X_train[pos])
    plt.title('Image #{}'.format(pos))
    plt.axis("off")
    plt.subplot(y*2, x, (i*2+1)*x+j+1)

    plt.imshow(np.squeeze(Y_train[pos]))
    plt.title('Mask #{}'.format(pos))
    plt.axis("off")
plt.show()

def iou_metric(y_true_in, y_pred_in, print_table=False):
    labels = label(y_true_in > 0.5)
    y_pred = label(y_pred_in > 0.5)

    true_objects = len(np.unique(labels))
    pred_objects = len(np.unique(y_pred))

    intersection = np.histogram2d(labels.flatten(), y_pred.flaten(), bins=(true_objects, pred_objects[0]))

    area_true = np.histogram(labels, bins=true_objects)[0]
    area_pred = np.histogram(y_pred, bins=pred_objects)[0]
    area_true = np.expand_dims(area_true, -1)
    area_pred = np.expand_dims(area_pred, 0)

    union = area_true + area_pred - intersection

    intersection = intersection[1:,1:]
    union = union[1:,1:]
    union[union == 0] = 1e-9

    iou = intersection / union

    def precision_at(threshold, iou):
        matches = iou > threshold
        true_positives = np.sum(matches, axis=1) == 1
        false_positives = np.sum(matches, axis=0) == 0
        false_negatives = np.sum(matches, axis=1) == 0
        tp, fp, fn = np.sum(true_positives), np.sum(false_positives), np.sum(false_negatives)
        return tp, fp, fn
      
    prec = []
    if print_table:
        print("Thresh\tTP\tFP\tFN\tPrec.")
    for t in np.arange(0.5,1.0,0.05):
        tp, fp, fn = precison_at(t, iou)
        if (tp + fp + fn) > 0:
            p = tp / (tp + fp + fn)
        else:
            p = 0
        if print_table:
            print("{:1.3f}\t{}\t{}\t{}\t{:1.3f}".format(t, tp, fp, fn, p))
        prec.append(p)
    if print_table:
        print("AP\t-\t-\t-\t{:1.3f}".format(np.mean(prec)))
    return np.mean(prec)

def iou_metric_batch(y_true_in, y_pred_in):
    batch_size = y_true_in.shape[0]
    metric = []
    for batch in range(batch_size):
        value = iou_metric(y_true_in[batch], y_pred_in[batch])
        metric.append(value)
    return np.array(np.mean(metric), dtype=np.float32)

def my_iou_metric(label, pred):
    metric_value = tf.py_function(iou_metric_batch, (label, pred), tf.float32)
    return metric_value

inputs = Input((IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS))
s = Lambda(lambda x: x / 255) (inputs)

c1 = Conv2D(16, (3,3), activation="elu", kernel_initializer="he_normal", padding="same")(s)
c1 = Dropout(0.1)(c1)
c1 = Conv2D(16, (3,3), activation="elu", kernel_initializer="he_normal", padding="same")(c1)
p1 = MaxPooling2D((2,2)) (c1)

c2 = Conv2D(32, (3,3), activation="elu", kernel_initializer="he_normal", padding="same")(p1)
c2 = Dropout(0.1)(c2)
c2 = Conv2D(32, (3,3), activation="elu", kernel_initializer="he_normal", padding="same")(c2)
p2 = MaxPooling2D((2,2))(c2)

c3 = Conv2D(64, (3,3), activation="elu", kernel_initializer="he_normal", padding="same")(p2)
c3 = Dropout(0.2)(c3)
c3 = Conv2D(64, (3,3), activation="elu", kernel_initializer="he_normal", padding="same")(c3)
p3 = MaxPooling2D((2,2))(c3)

c4 = Conv2D(128, (3,3), activation="elu", kernel_initializer="he_normal", padding="same")(p3)
c4 = Dropout(0.2)(c4)
c4 = Conv2D(128, (3,3), activation="elu", kernel_initializer="he_normal", padding="same")(c4)
p4 = MaxPooling2D((2,2))(c4)


c5 = Conv2D(256, (3,3), activation="elu", kernel_initializer="he_normal", padding="same")(p4)
c5 = Dropout(0.3)(c5)
c5 = Conv2D(256, (3,3), activation="elu", kernel_initializer="he_normal", padding="same")(c5)

u6 = Conv2DTranspose(128, (2,2), strides=(2,2), padding="same")(c5)
u6 = Concatenate()([u6, c4])
c6 = Conv2D(128, (3,3), activation="elu", kernel_initializer="he_normal", padding="same")(u6)
c6 = Dropout(0.2)(c6)
c6 = Conv2D(128, (3,3), activation="elu", kernel_initializer="he_normal", padding="same")(c6)


u7 = Conv2DTranspose(64, (2,2), strides=(2,2), padding="same")(c6)
u7 = Concatenate()([u7, c3])
c7 = Conv2D(64, (3,3), activation="elu", kernel_initializer="he_normal", padding="same")(u7)
c7 = Dropout(0.2)(c7)
c7 = Conv2D(64, (3,3), activation="elu", kernel_initializer="he_normal", padding="same")(c7)

u8 = Conv2DTranspose(32, (2,2), strides=(2,2), padding="same")(c7)
u8 = Concatenate()([u8, c2])
c8 = Conv2D(32, (3,3), activation="elu", kernel_initializer="he_normal", padding="same")(u8)
c8 = Dropout(0.1)(c8)
c8 = Conv2D(32, (3,3), activation="elu", kernel_initializer="he_normal", padding="same")(c8)


u9 = Conv2DTranspose(16, (2,2), strides=(2,2), padding="same")(c8)
u9 = Concatenate()([u9, c1])
c9 = Conv2D(16, (3,3), activation="elu", kernel_initializer="he_normal", padding="same")(u9)
c9 = Dropout(0.1)(c9)
c9 = Conv2D(16, (3,3), activation="elu", kernel_initializer="he_normal", padding="same")(c9)

outputs = Conv2D(1, (1,1), activation="sigmoid")(c9)

model = Model(inputs=[inputs], outputs=[outputs])
model.compile(optimizer="adam", loss="binary_crossentropy", metrics=[my_iou_metric])
model.summary()

model_path = "medical_imaging.h5"
checkpoint = ModelCheckpoint(model_path,
                             monitor="val_loss",
                             mode= "min",
                             save_best_only = True,
                             verbose=1)
earlystop = EarlyStopping(monitor = "val_loss,",
                          min_delta = 0,
                          patience= 5,
                          verbose=1,
                          restore_best_weights = True)


history = model.fit(X_train, Y_train, validation_split=0.1,
                    batch_size=16, epochs=50,
                    callbacks = [earlystop, checkpoint])

model = load_model("medical_imaging.h5", 
                   custom_objects = {"my_iou_metric": my_iou_metric})

#model = load_model("medical_imaging.h5")

preds_train = model.predict(X_train[:int(X_train.shape[0]*0.9)], verbose=1)
preds_val = model.predict(X_train[int(X_train.shape[0]*0.9):], verbose=1)

preds_train_t = (preds_train > 0.5).astype(np.uint8)
preds_val_t = (preds_val > 0.5).astype(np.uint8)

ix = random.randint(0,602)
plt.figure(figsize=(20,20))

plt.subplot(131)
imshow(X_train[ix])
plt.title("Image")

plt.subplot(132)
imshow(np.squeeze(Y_train[ix]))
plt.title("Mask")

plt.subplot(133)
imshow(np.squeeze(preds_train_t[ix] > 0.5))
plt.title("Predictions")
plt.show()

ix = random.randint(602,668)
plt.figure(figsize=(20,20))

plt.subplot(121)
imshow(X_train[ix])
plt.title("Image")

plt.subplot(122)
ix = ix - 603
imshow(np.squeeze(preds_val_t[ix] > 0.5))
plt.title("Predictions")
plt.show()

ix = random.randint(602,668)
plt.figure(figsize=(20,20))

plt.subplot(121)
imshow(X_train[ix])
plt.title("Image")

plt.subplot(122)
ix = ix - 603
imshow(np.squeeze(preds_val_t[ix] > 0.5))
plt.title("Predictions")
plt.show()

ix = random.randint(602,668)
plt.figure(figsize=(20,20))

plt.subplot(121)
imshow(X_train[ix])
plt.title("Image")

plt.subplot(122)
ix = ix - 603
imshow(np.squeeze(preds_val_t[ix] > 0.5))
plt.title("Predictions")
plt.show()

preds_test = model.predict(X_test, verbose=1)

ix = random.randint(0,69)
plt.figure(figsize=(20,20))

plt.subplot(121)
imshow(X_test[ix])
plt.title("Image")

plt.subplot(122)
imshow(np.squeeze(preds_test[ix] > 0.5))
plt.title("Predictions")
plt.show()

ix = random.randint(0,69)
plt.figure(figsize=(20,20))

plt.subplot(121)
imshow(X_test[ix])
plt.title("Image")

plt.subplot(122)
imshow(np.squeeze(preds_test[ix] > 0.5))
plt.title("Predictions")
plt.show()

ix = random.randint(0,69)
plt.figure(figsize=(20,20))

plt.subplot(121)
imshow(X_test[ix])
plt.title("Image")

plt.subplot(122)
imshow(np.squeeze(preds_test[ix] > 0.5))
plt.title("Predictions")
plt.show()

ix = random.randint(0,69)
plt.figure(figsize=(20,20))

plt.subplot(121)
imshow(X_test[ix])
plt.title("Image")

plt.subplot(122)
imshow(np.squeeze(preds_test[ix] > 0.5))
plt.title("Predictions")
plt.show()

ix = random.randint(0,69)
plt.figure(figsize=(20,20))

plt.subplot(121)
imshow(X_test[ix])
plt.title("Image")

plt.subplot(122)
imshow(np.squeeze(preds_test[ix] > 0.5))
plt.title("Predictions")
plt.show()

ix = random.randint(0,69)
plt.figure(figsize=(20,20))

plt.subplot(121)
imshow(X_test[ix])
plt.title("Image")

plt.subplot(122)
imshow(np.squeeze(preds_test[ix] > 0.5))
plt.title("Predictions")
plt.show()

ix = random.randint(0,69)
plt.figure(figsize=(20,20))

plt.subplot(121)
imshow(X_test[ix])
plt.title("Image")

plt.subplot(122)
imshow(np.squeeze(preds_test[ix] > 0.5))
plt.title("Predictions")
plt.show()

ix = random.randint(0,69)
plt.figure(figsize=(20,20))

plt.subplot(121)
imshow(X_test[ix])
plt.title("Image")

plt.subplot(122)
imshow(np.squeeze(preds_test[ix] > 0.5))
plt.title("Predictions")
plt.show()

ix = random.randint(0,490)
plt.figure(figsize=(50,50))

plt.subplot(131)
imshow(X_train[ix])
plt.title("Image")

plt.subplot(132)
imshow(np.squeeze(Y_train[ix]))
plt.title("Mask")

plt.subplot(133)
imshow(np.squeeze(preds_train_t[ix] > 0.5))
plt.title("Predictions")
plt.show()